- 확인필요.
1. 목과 스텁만으로 불가한것들... -> in-container 테스트 더 깊이 다루는 이유
-> cactus 테스트 방법 소개

---
1. @ExtendWith(MockitoExtension.class)
📌 역할
JUnit 5에서 Mockito를 테스트에 통합하기 위한 설정이에요.

이 어노테이션이 있어야 Mockito가 @Mock, @InjectMocks 같은 어노테이션을 해석해서 모의(Mock) 객체를 만들어주고 주입까지 해줘요.

🛠 예를 들어보면
Mockito를 활성화하지 않으면 @Mock이 붙은 객체가 그냥 null이에요.

@ExtendWith(MockitoExtension.class)가 붙어 있어야 Mockito가 테스트 실행 시 repository 같은 목(mock) 객체를 생성해서 넣어줍니다.

2. @Mock
📌 역할
테스트 대상(JunitService)에서 의존하는 객체(JunitRepository)를 진짜 객체 대신 가짜(mock) 객체로 만들어주는 어노테이션이에요.

이 가짜 객체는 실제 데이터베이스 접근 같은 무거운 작업을 하지 않고, 미리 설정한 동작만 흉내냅니다.

🛠 왜 필요하냐면?
예를 들어, 서비스가 DB에서 데이터를 조회할 때 진짜 DB를 사용하면 테스트가 느리고, 외부 환경에 의존해서 실패할 수도 있어요.

그래서 DB 접근을 담당하는 Repository를 가짜로 만들어서 테스트하는 동안 원하는 데이터만 딱딱 돌려주게 하는 거예요.

3. @InjectMocks
📌 역할
테스트하려는 실제 클래스 인스턴스(JunitService)를 만들어주고, 그 안에 @Mock으로 만들어진 가짜 객체들을 자동으로 주입(inject)해줘요.

🛠 쉽게 말하면
JunitService를 테스트하려면 내부에 JunitRepository 객체가 있어야 하죠?

그런데 JunitRepository는 @Mock으로 만들어진 가짜 객체를 넣어줘야 하니까, 이걸 자동으로 연결해주는 역할이에요.

쉽게 비유하자면
역할	실제 예시	테스트 코드에서 역할
@Mock	배우 대신 더미 인형을 준비한다	JunitRepository를 실제 대신 가짜 객체로 만든다
@InjectMocks	가짜 인형을 배우가 들고 무대에 나간다	JunitService 인스턴스를 만들고 @Mock 가짜 객체를 주입한다
@ExtendWith	무대 뒤에서 배우와 인형이 제대로 움직이도록 도와주는 감독	Mockito가 테스트 환경에서 목 객체 생성과 주입을 가능하게 해준다

정리
어노테이션	기능
@ExtendWith(MockitoExtension.class)	JUnit5가 Mockito를 인식하도록 연결해주는 설정 (Mockito 활성화)
@Mock	실제 객체 대신 테스트용 가짜 객체(Mock)를 만들어서 할당
@InjectMocks	테스트 대상 객체를 만들고, 그 안에 @Mock으로 만든 가짜 객체를 주입해주는 역할

실제 동작 흐름 예시
테스트 실행 시 JUnit5가 MockitoExtension을 읽음 (@ExtendWith)

@Mock 붙은 repository 변수를 가짜 객체(Mock)로 만들어서 준비

@InjectMocks 붙은 service 객체를 생성

service 내부의 repository 필드에 자동으로 가짜 repository를 넣어줌

테스트 코드에서 repository의 동작을 when().thenReturn()으로 미리 정의 가능

service를 호출하면, repository 호출은 가짜 객체에서 미리 설정한 결과 반환 → 실제 DB 호출 없이 빠른 테스트 가능




----

용어	설명
-Stub (스텁) : 테스트 대상 메서드가 호출할 다른 객체의 메서드에 대해 미리 정해진 결과값을 반환하도록 설정하는 것.

-Mock (목) : Stub 기능 + 해당 메서드가 정확히 몇 번 호출되었는지 등 행위(동작)를 검증할 수 있는 객체.
 Mockito에서는 대부분 Mock 객체로 Stub도 포함해서 사용함.

